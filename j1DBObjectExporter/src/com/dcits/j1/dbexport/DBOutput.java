//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package com.dcits.j1.dbexport;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class DBOutput {    private String base_path;    private File base;    public DBOutput(String path) throws IOException {        this.base_path = path;        this.base = new File(path);        if (this.base.exists()) {            if (!this.base.isDirectory()) {                throw new IOException("path is not a directory");            }        } else {            this.base.mkdirs();        }    }    public String writeScript(String objectOwner, String objectType, String objectName, String objectScript) throws Exception {        File scriptFile = new File(this.base, this.getObjectPath(objectOwner, objectType, objectName));        if (!scriptFile.getParentFile().exists()) {            scriptFile.getParentFile().mkdirs();        }        scriptFile.createNewFile();        OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(scriptFile), "UTF-8");        fw.write(objectScript);        fw.close();        return scriptFile.getPath();    }    public File createFile(String objectOwner, String objectType, String objectName) throws Exception {        File scriptFile = new File(this.base, this.getObjectPath(objectOwner, objectType, objectName));        if (!scriptFile.getParentFile().exists()) {            scriptFile.getParentFile().mkdirs();        }        scriptFile.createNewFile();        return scriptFile;    }    private String getObjectPath(String objectOwner, String objectType, String objectName) {        List<String> sourceObjects = new ArrayList();        Map<String, String> usermap = new HashMap();        usermap.put("J1_ADMIN", "01 dw/00 admin/");        usermap.put("J1_G3_ZBQ", "01 dw/01 inf/");        usermap.put("J1_LDM", "01 dw/02 ldm/");        usermap.put("J1_DW", "01 dw/03 dw/");        usermap.put("J1_DI", "01 dw/05 di/");        usermap.put("HX_ZGXT", "01 dw/06 hx_zgxt/");        usermap.put("J1_LDCX", "01 dw/06 ldcx/");        usermap.put("J1_CXTJ", "03 xt/01 cxtj/");        sourceObjects.add("FUNCTION");        sourceObjects.add("PACKAGE");        sourceObjects.add("PACKAGE BODY");        sourceObjects.add("PROCEDURE");        sourceObjects.add("TRIGGER");        StringBuffer sb_path = new StringBuffer();        if (usermap.containsKey(objectOwner)) {            sb_path.append((String)usermap.get(objectOwner));        } else {            sb_path.append("99 others/").append(objectOwner).append('/');        }        if ("DATA".equals(objectType)) {            sb_path.append("02 data/01 init/");        } else {            sb_path.append("01 object/");        }        if ("TABLE".equalsIgnoreCase(objectType)) {            sb_path.append("01 table/");        } else if ("VIEW".equalsIgnoreCase(objectType)) {            sb_path.append("02 view/");        } else if (sourceObjects.contains(objectType)) {            sb_path.append("04 procedure/");        } else if ("SEQUENCE".equalsIgnoreCase(objectType)) {            sb_path.append("06 sequence/");        } else if ("TYPE".equalsIgnoreCase(objectType)) {            sb_path.append("07 type/");        } else if ("SYNONYM".equalsIgnoreCase(objectType)) {            sb_path.append("09 synonym/");        }        sb_path.append(objectName);        if (sourceObjects.contains(objectType)) {            sb_path.append("_").append(objectType);        }        sb_path.append(".sql");        return sb_path.toString();    }    public boolean clear() {        return this.deleteDir(this.base);    }    private boolean deleteDir(File dir) {        if (dir.isDirectory()) {            File[] children = dir.listFiles();            File[] arr$ = children;            int len$ = children.length;            for(int i$ = 0; i$ < len$; ++i$) {                File child = arr$[i$];                boolean success;                if (child.isDirectory()) {                    success = this.deleteDir(child);                    if (!success) {                        return false;                    }                }                success = child.delete();                if (!success) {                    return false;                }            }        }        return true;    }}